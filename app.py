import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import io

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ ==================
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –¢–æ—Ä–Ω–∞–¥–æ",
    page_icon="üî•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• –¢–ï–ü–õ–û–í–ï–ù–¢–ò–õ–Ø–¢–û–†–û–í ==================
@st.cache_data
def load_heat_exchangers():
    return [
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 3', 'power': 20, 'air_flow': 1330, 'height': 300, 'width': 280, 'rows': 4, 'price': 65000},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 4', 'power': 33, 'air_flow': 2670, 'height': 400, 'width': 400, 'rows': 3, 'price': 85000},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 5', 'power': 55, 'air_flow': 4500, 'height': 500, 'width': 500, 'rows': 3, 'price': 120000},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 10', 'power': 110, 'air_flow': 9000, 'height': 500, 'width': 1000, 'rows': 4, 'price': 280000}
    ]

# ================== –ú–ê–¢–ï–†–ò–ê–õ–´ ==================
MATERIALS = {
    '–∫–∏—Ä–ø–∏—á': 0.7,
    '–≥–∞–∑–æ–±–ª–æ–∫': 0.18,
    '–ø–µ–Ω–æ–±–ª–æ–∫': 0.16,
    '–∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–ª–æ–∫': 0.4,
    '—Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª—å': 0.05,
    '–±—Ä—É—Å': 0.15
}

U_VALUES = {
    '–æ–∫–Ω–æ_–æ–¥–∏–Ω–∞—Ä–Ω–æ–µ': 5.0,
    '–æ–∫–Ω–æ_–¥–≤–æ–π–Ω–æ–µ': 2.9,
    '–æ–∫–Ω–æ_—Ç—Ä–æ–π–Ω–æ–µ': 1.5,
    '–æ–∫–Ω–æ_–µ–≤—Ä–æ': 1.3,
    '–¥–≤–µ—Ä—å_–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è': 2.0,
    '–¥–≤–µ—Ä—å_–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è': 1.5,
    '–¥–≤–µ—Ä—å_—É—Ç–µ–ø–ª–µ–Ω–Ω–∞—è': 0.8,
    '–ø–æ–ª_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.5,
    '–ø–æ–ª_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.2,
    '–ø–æ—Ç–æ–ª–æ–∫_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.6,
    '–ø–æ—Ç–æ–ª–æ–∫_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.25
}

RADIATOR_POWER = {
    ('–∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ', 350): 140,
    ('–∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ', 500): 180,
    ('—á—É–≥—É–Ω–Ω—ã–µ', 350): 120,
    ('—á—É–≥—É–Ω–Ω—ã–µ', 500): 160,
}

# ================== –†–ê–°–ß–Å–¢ –¢–ï–ü–õ–û–ü–û–¢–ï–†–¨ ==================
def calculate_heat_loss(room_params):
    total_loss = 0
    temp_diff = room_params['temp_in'] - room_params['temp_out']

    # –°—Ç–µ–Ω—ã
    wall_loss = (room_params['wall_area'] *
                MATERIALS[room_params['wall_material']] /
                max(room_params['wall_thickness'], 0.01) * temp_diff)
    total_loss += wall_loss

    # –û–∫–Ω–∞
    window_loss = room_params['window_area'] * U_VALUES[room_params['window_type']] * temp_diff
    total_loss += window_loss

    # –î–≤–µ—Ä–∏
    door_loss = room_params['door_area'] * U_VALUES[room_params['door_type']] * temp_diff
    total_loss += door_loss

    # –ü–æ–ª
    floor_type = '–ø–æ–ª_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if room_params['floor_insulated'] else '–ø–æ–ª_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'
    floor_loss = room_params['floor_area'] * U_VALUES[floor_type] * temp_diff
    total_loss += floor_loss

    # –ü–æ—Ç–æ–ª–æ–∫
    ceiling_type = '–ø–æ—Ç–æ–ª–æ–∫_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if room_params['ceiling_insulated'] else '–ø–æ—Ç–æ–ª–æ–∫_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'
    ceiling_loss = room_params['ceiling_area'] * U_VALUES[ceiling_type] * temp_diff
    total_loss += ceiling_loss

    # –ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    infiltration_loss = room_params['room_volume'] * 0.3 * 1.2 * 1005 * temp_diff / 3600
    total_loss += infiltration_loss

    # –†–∞–¥–∏–∞—Ç–æ—Ä—ã
    if room_params.get('has_radiators', False):
        power_per_section = RADIATOR_POWER[(room_params['radiator_type'], room_params['radiator_height'])]
        radiator_heat = power_per_section * room_params['radiator_sections']
        total_loss -= radiator_heat

    return max(total_loss, 0)

# ================== –ü–û–î–ë–û–† –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ==================
def select_heat_exchangers(required_power, room_volume):
    exchangers = load_heat_exchangers()
    suitable = []

    for unit in exchangers:
        count = max(1, int(np.ceil(required_power / unit['power'])))
        total_power = unit['power'] * count
        air_exchange = (unit['air_flow'] * count) / room_volume if room_volume > 0 else 0

        if air_exchange >= 2.5:
            suitable.append({
                'model': unit['model'],
                'count': count,
                'total_power': total_power,
                'air_flow': unit['air_flow'] * count,
                'air_exchange': round(air_exchange, 1),
                'price': unit['price'] * count
            })

    return suitable

# ================== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–¢–û–ö–ê ==================
def create_airflow_visualization(units, room_length, room_height):
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.set_xlim(0, room_length)
    ax.set_ylim(0, room_height)
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞")

    for i, unit in enumerate(units):
        x = 0.5 + i * 1.5
        y = 0.5

        # –∫–æ—Ä–ø—É—Å
        ax.add_patch(plt.Rectangle((x-0.2, y-0.2), 0.4, 0.4, color='red'))

        # –ø–æ—Ç–æ–∫ (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç)
        for alpha, width in zip([0.3, 0.2, 0.1], [2, 3.5, 5]):
            ax.add_patch(plt.Rectangle((x, y-0.5), width, room_height, color='orange', alpha=alpha))

        ax.text(x, y+0.5, f"{unit['model']} x{unit['count']}", fontsize=8, color='black')

    return fig

# ================== –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ==================
def main():
    st.title("üî• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ '–¢–æ—Ä–Ω–∞–¥–æ'")

    # ========== –°–∞–π–¥–±–∞—Ä ==========
    with st.sidebar:
        st.header("üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è")
        area = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)", min_value=10.0, max_value=1000.0, value=100.0, step=1.0)
        height = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–º)", min_value=2.0, max_value=10.0, value=4.0, step=0.1)
        room_volume = area * height

        wall_material = st.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()))
        wall_thickness = st.number_input("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (–º)", min_value=0.1, max_value=1.0, value=0.4, step=0.05)

        window_area = st.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", min_value=0.0, value=10.0, step=0.5)
        window_type = st.selectbox("–¢–∏–ø –æ–∫–æ–Ω", list([k for k in U_VALUES if k.startswith("–æ–∫–Ω–æ")]))

        door_area = st.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", min_value=0.0, value=2.0, step=0.1)
        door_type = st.selectbox("–¢–∏–ø –¥–≤–µ—Ä–µ–π", list([k for k in U_VALUES if k.startswith("–¥–≤–µ—Ä—å")]))

        floor_insulated = st.checkbox("–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–π –ø–æ–ª", value=True)
        ceiling_insulated = st.checkbox("–£—Ç–µ–ø–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–ª–æ–∫", value=True)

        st.subheader("üå°Ô∏è –ö–ª–∏–º–∞—Ç")
        temp_out = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞—Ä—É–∂–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ (¬∞C)", value=-15)
        temp_in = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏—è (¬∞C)", value=20)
        temp_water = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è (¬∞C)", value=70)

        st.subheader("üöø –†–∞–¥–∏–∞—Ç–æ—Ä—ã")
        has_radiators = st.checkbox("–ï—Å—Ç—å —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è", value=False)
        radiator_type, radiator_height, radiator_sections = None, None, 0
        if has_radiators:
            radiator_type = st.selectbox("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞", ["–∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ", "—á—É–≥—É–Ω–Ω—ã–µ"])
            radiator_height = st.selectbox("–í—ã—Å–æ—Ç–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ (–º–º)", [350, 500])
            radiator_sections = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π", min_value=1, max_value=100, value=10)

        st.subheader("üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞")
        unit_position = st.radio("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", ["–£ —Å—Ç–µ–Ω—ã", "–í —É–≥–ª—É", "–ü–æ —Ü–µ–Ω—Ç—Ä—É"], index=0)

    # ========== –†–∞—Å—á—ë—Ç—ã ==========
    wall_area = area * height * 0.4
    floor_area = area
    ceiling_area = area

    params = {
        'wall_area': wall_area,
        'floor_area': floor_area,
        'ceiling_area': ceiling_area,
        'room_volume': room_volume,
        'wall_material': wall_material,
        'wall_thickness': wall_thickness,
        'window_area': window_area,
        'window_type': window_type,
        'door_area': door_area,
        'door_type': door_type,
        'floor_insulated': floor_insulated,
        'ceiling_insulated': ceiling_insulated,
        'temp_in': temp_in,
        'temp_out': temp_out,
        'has_radiators': has_radiators,
        'radiator_type': radiator_type,
        'radiator_height': radiator_height,
        'radiator_sections': radiator_sections
    }

    heat_loss = calculate_heat_loss(params) / 1000  # –∫–í—Ç

    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")
    st.metric("–û–±—ä–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è", f"{room_volume:.1f} –º¬≥")
    st.metric("–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏", f"{heat_loss:.2f} –∫–í—Ç")

    st.subheader("üî• –ü–æ–¥–±–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤")
    units = select_heat_exchangers(heat_loss, room_volume)
    if units:
        df = pd.DataFrame(units)
        st.dataframe(df, use_container_width=True, hide_index=True)

        fig = create_airflow_visualization(units, room_length=10, room_height=height)
        st.pyplot(fig)
    else:
        st.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")

if __name__ == "__main__":
    main()
