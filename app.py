import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
import math

st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –¢–æ—Ä–Ω–∞–¥–æ",
    page_icon="üå™Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# -------------------------
# –î–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -------------------------
@st.cache_data
def load_heat_exchangers():
    # –ú–æ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç, —Ä–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –º¬≥/—á)
    return [
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 3', 'power': 20, 'air_flow': 1330, 'height': 300, 'width': 280, 'rows': 4, 'price': 65000, 'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 4', 'power': 33, 'air_flow': 2670, 'height': 400, 'width': 400, 'rows': 3, 'price': 85000, 'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 5', 'power': 55, 'air_flow': 4500, 'height': 500, 'width': 500, 'rows': 3, 'price': 120000, 'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 10', 'power': 240, 'air_flow': 9000, 'height': 500, 'width': 1000, 'rows': 4, 'price': 280000, 'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        # –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
        {'model': 'TF 400.200.2', 'power': 13, 'air_flow': 850, 'height': 200, 'width': 400, 'rows': 2, 'price': 45000, 'type': '–±–∞–∑–æ–≤–∞—è'},
        {'model': 'TF 500.300.3', 'power': 34, 'air_flow': 1600, 'height': 300, 'width': 500, 'rows': 3, 'price': 78000, 'type': '–±–∞–∑–æ–≤–∞—è'},
    ]

# –¢–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏ (–≤ —É—Å–ª–æ–≤–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥–ª—è –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞)
MATERIALS = {
    '–∫–∏—Ä–ø–∏—á': 0.7,
    '–≥–∞–∑–æ–±–ª–æ–∫': 0.18,
    '–ø–µ–Ω–æ–±–ª–æ–∫': 0.16,
    '–∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–ª–æ–∫': 0.4,
    '—Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª—å': 0.05,
    '–±—Ä—É—Å': 0.15
    # '–±–µ—Ç–æ–Ω' —É–¥–∞–ª—ë–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã U (–í—Ç/–º¬≤¬∑¬∞C) –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
U_VALUES = {
    '–æ–∫–Ω–æ_–æ–¥–∏–Ω–∞—Ä–Ω–æ–µ': 5.0,
    '–æ–∫–Ω–æ_–¥–≤–æ–π–Ω–æ–µ': 2.9,
    '–æ–∫–Ω–æ_—Ç—Ä–æ–π–Ω–æ–µ': 1.5,
    '–æ–∫–Ω–æ_–µ–≤—Ä–æ': 1.3,
    '–¥–≤–µ—Ä—å_–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è': 2.0,
    '–¥–≤–µ—Ä—å_–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è': 1.5,
    '–¥–≤–µ—Ä—å_—É—Ç–µ–ø–ª–µ–Ω–Ω–∞—è': 0.8,
    '–ø–æ–ª_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.5,
    '–ø–æ–ª_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.2,
    '–ø–æ—Ç–æ–ª–æ–∫_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.6,
    '–ø–æ—Ç–æ–ª–æ–∫_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.25
}

# –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç–µ–ø–ª–æ–æ—Ç–¥–∞—á–∏ –Ω–∞ —Å–µ–∫—Ü–∏—é —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ (–í—Ç/¬∞C –Ω–∞ —Å–µ–∫—Ü–∏—é)
# section_coeff[type][height_mm] = –í—Ç/¬∞C/—Å–µ–∫—Ü–∏—è
SECTION_COEFF = {
    '–∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ':    {350: 2.4, 500: 3.2},
    '—á—É–≥—É–Ω–Ω—ã–µ':       {350: 1.8, 500: 2.6},
    '—Å—Ç–∞–ª—å–Ω—ã–µ':       {350: 2.0, 500: 2.8}
}

# -------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# -------------------------
def calculate_heat_loss(params):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–µ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ (–í—Ç) –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º.
    –í—Ö–æ–¥: params ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
      - area (–º¬≤), height (–º)
      - wall_material, wall_thickness (–º)
      - window_area, window_type
      - door_area, door_type
      - floor_insulated (bool), ceiling_insulated (bool)
      - t_out (¬∞C), t_in (¬∞C)
      - room_volume (–º¬≥) (–º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å)
      - radiator_heat (–í—Ç) ‚Äî —Å—É–º–º–∞—Ä–Ω–∞—è –æ—Ç–¥–∞—á–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞—é—â–µ–µ –ø–æ—Ç–µ—Ä–∏)
    """
    t_out = params['t_out']
    t_in = params['t_in']
    delta = max(t_in - t_out, 0.0)  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–ª—å—Ç–∞
    area = params['area']
    height = params['height']

    # –û—Ü–µ–Ω–∫–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö: –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ –∫–≤–∞–¥—Ä–∞—Ç: side = sqrt(area)
    side = math.sqrt(max(area, 0.01))
    perimeter = 4 * side
    wall_area = perimeter * height

    # –°—Ç–µ–Ω—ã
    wall_loss = wall_area * (MATERIALS.get(params['wall_material'], 0.4) / max(params['wall_thickness'], 0.01)) * delta

    # –û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏
    window_loss = params['window_area'] * U_VALUES[params['window_type']] * delta
    door_loss = params['door_area'] * U_VALUES[params['door_type']] * delta

    # –ü–æ–ª –∏ –ø–æ—Ç–æ–ª–æ–∫
    floor_type = '–ø–æ–ª_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if params['floor_insulated'] else '–ø–æ–ª_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'
    floor_loss = area * U_VALUES[floor_type] * delta
    ceiling_type = '–ø–æ—Ç–æ–ª–æ–∫_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if params['ceiling_insulated'] else '–ø–æ—Ç–æ–ª–æ–∫_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'
    ceiling_loss = area * U_VALUES[ceiling_type] * delta

    # –ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Äî –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ: –æ–±—ä–µ–º * –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞ (0.3) * –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ * cp * dT / 3600
    room_volume = area * height
    infiltration_loss = room_volume * 0.3 * 1.2 * 1005 * delta / 3600

    # –°—É–º–º–∏—Ä—É–µ–º
    total = wall_loss + window_loss + door_loss + floor_loss + ceiling_loss + infiltration_loss

    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ø–ª–æ –æ—Ç —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    radiator_heat = params.get('radiator_heat', 0.0)  # –í—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = —Ç–µ–ø–ª–æ –æ—Ç —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞)
    # –ø–æ—Å–∫–æ–ª—å–∫—É —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã –¥–∞—é—Ç —Ç–µ–ø–ª–æ, –æ–Ω–∏ —É–º–µ–Ω—å—à–∞—é—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
    net = max(total - radiator_heat, 0.0)

    breakdown = {
        '–°—Ç–µ–Ω—ã': wall_loss,
        '–û–∫–Ω–∞': window_loss,
        '–î–≤–µ—Ä–∏': door_loss,
        '–ü–æ–ª': floor_loss,
        '–ü–æ—Ç–æ–ª–æ–∫': ceiling_loss,
        '–ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è': infiltration_loss
    }
    if radiator_heat > 0:
        breakdown['–†–∞–¥–∏–∞—Ç–æ—Ä—ã (–æ—Ç–¥–∞—á–∞)'] = -radiator_heat  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –≤–∫–ª–∞–¥ –≤ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–µ—Ä—å

    return net, breakdown, room_volume, wall_area

def radiator_total_heat(sections_total, rad_type, height_mm, t_fluid_in, t_in):
    """
    –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ —Ç–µ–ø–ª–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞:
      Q = sections_total * coeff * (t_fluid_in - t_in)  (–í—Ç)
    coeff –∏–∑ SECTION_COEFF (–í—Ç/¬∞C –Ω–∞ —Å–µ–∫—Ü–∏—é).
    """
    if sections_total <= 0:
        return 0.0
    coeff = SECTION_COEFF.get(rad_type, {}).get(height_mm, None)
    if coeff is None:
        # –∑–∞–ø–∞—Å–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        coeff = 2.2
    delta = max(t_fluid_in - t_in, 0.0)
    return sections_total * coeff * delta

def select_heat_exchanger(required_kw, room_volume, prefer_type="—Ç–æ—Ä–Ω–∞–¥–æ"):
    """
    –ü–æ–¥–±–æ—Ä —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.
    required_kw ‚Äî —Ç—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç
    room_volume ‚Äî –º¬≥
    """
    units = load_heat_exchangers()
    suitable = []
    for u in units:
        # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å 15%
        if u['power'] < required_kw * 1.15:
            continue
        # –ø—Ä–æ–≤–µ—Ä–∏–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞
        air_exchange = u['air_flow'] / max(room_volume, 1.0)
        if 2.5 <= air_exchange <= 7:
            power_margin = (u['power'] - required_kw) / required_kw * 100 if required_kw > 0 else 0
            efficiency = u['power'] / (1 + abs(3.5 - air_exchange))  # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
            suitable.append({
                'model': u['model'],
                'power': u['power'],
                'air_flow': u['air_flow'],
                'air_exchange': round(air_exchange, 2),
                'power_reserve_%': round(power_margin, 1),
                'price': u['price'],
                'efficiency': round(efficiency, 2)
            })
    return sorted(suitable, key=lambda x: (-x['efficiency'], x['price']))

# -------------------------
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
# -------------------------
def create_placement_visualization(area_m2, height_m, recommended_location='along_long_wall'):
    """
    –†–∏—Å—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—É—é —Å—Ö–µ–º—É: –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–ø–æ–º–µ—â–µ–Ω–∏–µ), –ø–æ–∑–∏—Ü–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –∏ —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ—Ç–æ–∫–∞ –≤–æ–∑–¥—É—Ö–∞.
    recommended_location: 'center', 'along_long_wall', 'corner'
    """
    # –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–¥–æ –∑–∞–¥–∞—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é —Ñ–æ—Ä–º—É.
    side = math.sqrt(max(area_m2, 1.0))
    fig, ax = plt.subplots(figsize=(6, 6 * (side/ max(side,1))))
    ax.set_xlim(0, side)
    ax.set_ylim(0, side)
    ax.set_aspect('equal')
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_title("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—ë–ø–ª–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤–æ–∑–¥—É—Ö–∞")

    # –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä –ø–æ–º–µ—â–µ–Ω–∏—è
    rect = plt.Rectangle((0,0), side, side, fill=False, linewidth=2)
    ax.add_patch(rect)

    # –í—ã—á–∏—Å–ª–∏–º —Ç–æ—á–∫—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
    if recommended_location == 'center':
        fx, fy = side/2, side/2
    elif recommended_location == 'corner':
        fx, fy = side*0.15, side*0.85
    else:  # along_long_wall ‚Äî –ø–æ —Ü–µ–Ω—Ç—Ä—É –æ–¥–Ω–æ–π —Å—Ç–µ–Ω—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏–∏)
        fx, fy = side*0.1, side/2

    # –†–∏—Å—É–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ + –∫—Ä—É–≥)
    fan_circle = plt.Circle((fx, fy), side*0.03, color='orange', alpha=0.9)
    ax.add_patch(fan_circle)
    # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ ‚Äî —Å—Ç—Ä–µ–ª–∫–∏
    # —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–¥–∏–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π-—Å—Ç—Ä–µ–ª–æ–∫ –æ—Ç —Ñ–∞–Ω–∫–∏
    n_arrows = 10
    max_len = side * 0.9
    for i in range(n_arrows):
        ang = -math.pi/6 + (i/(n_arrows-1))*(math.pi/3)  # –≤–µ–µ—Ä ¬±30¬∞
        dx = math.cos(ang) * max_len
        dy = math.sin(ang) * max_len
        ax.arrow(fx, fy, dx*0.25, dy*0.25, head_width=side*0.02, head_length=side*0.03, length_includes_head=True, alpha=0.6)
        # –±–æ–ª–µ–µ –¥–∞–ª—å–Ω–∏–µ –ª–∏–Ω–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è)
        ax.arrow(fx + dx*0.25, fy + dy*0.25, dx*0.25, dy*0.25, head_width=side*0.015, head_length=side*0.02, length_includes_head=True, alpha=0.35)

    # –ø–æ–¥–ø–∏—Å–∏
    ax.text(fx, fy - side*0.06, "–¢–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä\n(—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ)", ha='center')
    ax.text(side*0.95, side*0.05, f"–ü–ª–æ—â–∞–¥—å: {area_m2:.1f} –º¬≤\n–í—ã—Å–æ—Ç–∞: {height_m:.2f} –º", ha='right', fontsize=9)
    plt.tight_layout()
    return fig

# -------------------------
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# -------------------------
def main():
    st.title("üå™Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –¢–æ—Ä–Ω–∞–¥–æ")
    st.markdown("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω —Å—Ä–∞–∑—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–æ–ø–ª–µ–Ω–∏–∏ –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏ '–¢–æ—Ä–Ω–∞–¥–æ'. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.")

    st.sidebar.header("üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è")

    # –ü–ª–æ—â–∞–¥—å –≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω—ã/—à–∏—Ä–∏–Ω—ã
    area = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è, –º¬≤", min_value=4.0, max_value=10000.0, value=20.0, step=1.0)
    height = st.sidebar.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏—è, –º", min_value=2.0, max_value=12.0, value=3.0, step=0.1)

    st.sidebar.subheader("üè† –û–≥—Ä–∞–∂–¥–∞—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    wall_material = st.sidebar.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()))
    wall_thickness = st.sidebar.number_input("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (–º)", min_value=0.05, max_value=1.0, value=0.3, step=0.01)

    st.sidebar.markdown("**–û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏**")
    window_area = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", min_value=0.0, value=2.0, step=0.1)
    window_type = st.sidebar.selectbox("–¢–∏–ø –æ–∫–æ–Ω", ["–æ–∫–Ω–æ_–µ–≤—Ä–æ", "–æ–∫–Ω–æ_—Ç—Ä–æ–π–Ω–æ–µ", "–æ–∫–Ω–æ_–¥–≤–æ–π–Ω–æ–µ", "–æ–∫–Ω–æ_–æ–¥–∏–Ω–∞—Ä–Ω–æ–µ"])
    door_area = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", min_value=0.0, value=1.8, step=0.1)
    door_type = st.sidebar.selectbox("–¢–∏–ø –¥–≤–µ—Ä–µ–π", ["–¥–≤–µ—Ä—å_—É—Ç–µ–ø–ª–µ–Ω–Ω–∞—è", "–¥–≤–µ—Ä—å_–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è", "–¥–≤–µ—Ä—å_–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è"])

    st.sidebar.subheader("üîß –£—Ç–µ–ø–ª–µ–Ω–∏–µ")
    floor_ins = st.sidebar.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ–ª", value=True)
    ceiling_ins = st.sidebar.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ—Ç–æ–ª–æ–∫", value=True)

    st.sidebar.subheader("üî• –†–∞–¥–∏–∞—Ç–æ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)")
    has_radiators = st.sidebar.checkbox("–ï—Å—Ç—å —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è", value=False)
    radiator_heat_total = 0.0
    rad_type = None
    if has_radiators:
        rad_type = st.sidebar.selectbox("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞", list(SECTION_COEFF.keys()))
        rad_height = st.sidebar.selectbox("–í—ã—Å–æ—Ç–∞ —Å–µ–∫—Ü–∏–∏ (–º–º)", [350, 500], index=0)
        # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—Ü–∏–π: –ª–∏–±–æ —Å–≤—è–∑–∫–∏, –ª–∏–±–æ –æ–±—â–µ–µ
        sections_input_mode = st.sidebar.radio("–í–≤–æ–¥ —Å–µ–∫—Ü–∏–π", ["–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π", "—Å–µ–∫—Ü–∏–π –≤ —Å–≤—è–∑–∫–µ + —á–∏—Å–ª–æ —Å–≤—è–∑–æ–∫"], index=0)
        if sections_input_mode == "–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π":
            sections_total = st.sidebar.number_input("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π", min_value=0, value=0, step=1)
        else:
            per_bank = st.sidebar.number_input("–°–µ–∫—Ü–∏–π –≤ –æ–¥–Ω–æ–π —Å–≤—è–∑–∫–µ", min_value=1, value=4, step=1)
            banks = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–æ–∫", min_value=1, value=1, step=1)
            sections_total = per_bank * banks

        # –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è
    st.sidebar.subheader("üå°Ô∏è –ö–ª–∏–º–∞—Ç")
    t_out = st.sidebar.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–Ω–∞—Ä—É–∂–∏, ¬∞C", value=-20.0, step=0.5)
    t_in = st.sidebar.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä–∏ (—Ü–µ–ª–µ–≤–∞—è), ¬∞C", value=18.0, step=0.5)
    t_fluid_in = st.sidebar.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫, ¬∞C", value=70.0, step=0.5)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: —É–±—Ä–∞–Ω '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–±–æ—Ä–∞'
    st.sidebar.markdown("_(–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)_")

    # -------------------------
    # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç (–æ–Ω–ª–∞–π–Ω)
    # -------------------------
    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Ç–µ–ø–ª–æ–æ—Ç–¥–∞—á—É —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if has_radiators:
        radiator_heat_total = radiator_total_heat(sections_total, rad_type, rad_height, t_fluid_in, t_in)
    else:
        sections_total = 0

    params = {
        'area': area,
        'height': height,
        'wall_material': wall_material,
        'wall_thickness': wall_thickness,
        'window_area': window_area,
        'window_type': window_type,
        'door_area': door_area,
        'door_type': door_type,
        'floor_insulated': floor_ins,
        'ceiling_insulated': ceiling_ins,
        't_out': t_out,
        't_in': t_in,
        'radiator_heat': radiator_heat_total
    }

    net_loss_w, breakdown, room_volume, wall_area = calculate_heat_loss(params)
    net_loss_kw = net_loss_w / 1000.0

    # –ü–æ–¥–±–æ—Ä —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–±—É–µ–º—É—é –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç)
    suitable = select_heat_exchanger(net_loss_kw, room_volume)

    # -------------------------
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # -------------------------
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ (–æ–Ω–ª–∞–π–Ω)")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–ü–ª–æ—â–∞–¥—å", f"{area:.1f} –º¬≤")
        st.metric("–û–±—ä—ë–º –ø–æ–º–µ—â–µ–Ω–∏—è", f"{room_volume:.1f} –º¬≥")
    with col2:
        st.metric("–†–∞—Å—á—ë—Ç–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (—Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏)", f"{net_loss_kw:.2f} –∫–í—Ç")
        st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (–≤–Ω—É—Ç—Ä.-–Ω–∞—Ä—É–∂.)", f"{(t_in - t_out):.1f} ¬∞C")
    with col3:
        st.metric("–¢–µ–ø–ª–æ –æ—Ç —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", f"{radiator_heat_total/1000:.2f} –∫–í—Ç")
        st.metric("–°–µ–∫—Ü–∏–∏ (–≤—Å–µ–≥–æ)", f"{sections_total}")

    st.subheader("üîé –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–í—Ç)")
    df_break = pd.DataFrame.from_dict(breakdown, orient='index', columns=['–í—Ç'])
    df_break['–í—Ç_abs'] = df_break['–í—Ç'].abs()
    st.dataframe(df_break[['–í—Ç']], use_container_width=True)

    # -------------------------
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
    # -------------------------
    st.subheader("üìç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞")
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –µ—Å–ª–∏ —É–∑–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ (side_ratio), –¥—Ä—É–≥–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Äî –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–∞–¥–∏–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –≤—ã–±–µ—Ä–µ–º
    # –í—ã–±–µ—Ä–µ–º along_long_wall –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    fig_place = create_placement_visualization(area, height, recommended_location='along_long_wall')
    st.pyplot(fig_place)

    # -------------------------
    # –ü–æ–¥–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    # -------------------------
    st.header("üî• –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∏ '–¢–æ—Ä–Ω–∞–¥–æ'")
    if suitable:
        df = pd.DataFrame(suitable)
        df_display = df[['model', 'power', 'air_flow', 'air_exchange', 'power_reserve_%', 'price']].copy()
        df_display.columns = ['–ú–æ–¥–µ–ª—å', '–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç', '–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞, –º¬≥/—á', '–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥./—á', '–ó–∞–ø–∞—Å, %', '–¶–µ–Ω–∞, —Ä—É–±.']
        st.dataframe(df_display, use_container_width=True, hide_index=True)

        best = suitable[0]
        st.success(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {best['model']} ‚Äî {best['power']} –∫–í—Ç")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.info(f"–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞: {best['air_exchange']} 1/—á")
        with col2:
            st.info(f"–ó–∞–ø–∞—Å –º–æ—â–Ω–æ—Å—Ç–∏: {best['power_reserve_%']} %")
        with col3:
            st.info(f"–¶–µ–Ω–∞: {best['price']:,} —Ä—É–±.")
    else:
        st.warning("‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ (t_fluid_in), –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –∫–∞—Å–∫–∞–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.")

    # -------------------------
    # –≠–∫—Å–ø–æ—Ä—Ç
    # -------------------------
    st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    out_df = pd.DataFrame([{
        'area_m2': area,
        'height_m': height,
        'volume_m3': room_volume,
        't_out_C': t_out,
        't_in_C': t_in,
        't_fluid_in_C': t_fluid_in,
        'heat_need_kW': round(net_loss_kw, 3),
        'radiator_heat_kW': round(radiator_heat_total/1000.0, 3),
        'sections_total': sections_total
    }])
    csv_buffer = io.StringIO()
    out_df.to_csv(csv_buffer, index=False)
    csv_data = csv_buffer.getvalue()

    st.download_button("–°–∫–∞—á–∞—Ç—å CSV —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", csv_data, file_name=f"—Ä–∞—Å—á–µ—Ç_—Ç–æ—Ä–Ω–∞–¥–æ_area_{int(area)}m2.csv", mime="text/csv", use_container_width=True)

    report_txt = f"""–û–¢–ß–ï–¢ ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –¢–æ—Ä–Ω–∞–¥–æ
–ü–ª–æ—â–∞–¥—å: {area:.1f} –º¬≤
–í—ã—Å–æ—Ç–∞: {height:.2f} –º
–û–±—ä—ë–º: {room_volume:.1f} –º¬≥
–¢ –Ω–∞—Ä—É–∂–Ω.: {t_out:.1f} ¬∞C
–¢ –≤–Ω—É—Ç—Ä.: {t_in:.1f} ¬∞C
–¢ –≤—Ö. —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è: {t_fluid_in:.1f} ¬∞C
–†–∞—Å—á—ë—Ç–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: {net_loss_kw:.3f} –∫–í—Ç
–û—Ç–¥–∞—á–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: {radiator_heat_total/1000.0:.3f} –∫–í—Ç
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {best['model'] if suitable else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
"""
    st.download_button("–°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç", report_txt, file_name=f"–æ—Ç—á–µ—Ç_—Ç–æ—Ä–Ω–∞–¥–æ_area_{int(area)}m2.txt", mime="text/plain", use_container_width=True)

if __name__ == "__main__":
    main()
