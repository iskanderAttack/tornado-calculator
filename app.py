# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import math

# -----------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# -----------------------------
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤ –¢–æ—Ä–Ω–∞–¥–æ",
    page_icon="üå™Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# -----------------------------
# –î–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -----------------------------

@st.cache_data
def load_heat_exchangers():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö.
    throw_length ‚Äî –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—à–Ω–æ–π —Å—Ç—Ä—É–∏ –≤ –º–µ—Ç—Ä–∞—Ö.
    """
    return [
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 3',  'power_nominal': 20.0,  'air_flow': 1330, 'price': 65000,  't_water_nom': 90, 't_air_nom': 15, 'throw_length': 14},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 4',  'power_nominal': 33.0,  'air_flow': 2670, 'price': 85000,  't_water_nom': 90, 't_air_nom': 15, 'throw_length': 22},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 5',  'power_nominal': 55.0,  'air_flow': 4500, 'price': 120000, 't_water_nom': 90, 't_air_nom': 15, 'throw_length': 28},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 10', 'power_nominal': 106.0, 'air_flow': 9000, 'price': 280000, 't_water_nom': 90, 't_air_nom': 15, 'throw_length': 35},
    ]

MATERIALS = { '–ö–∏—Ä–ø–∏—á': 0.7, '–ì–∞–∑–æ–±–ª–æ–∫': 0.18, '–ü–µ–Ω–æ–±–ª–æ–∫': 0.16, '–ö–µ—Ä–∞–º–∑–∏—Ç–æ–±–ª–æ–∫': 0.4, '–°—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å': 0.05, '–ë—Ä—É—Å': 0.15 }
U_VALUES = { '–û–∫–Ω–æ –æ–¥–∏–Ω–∞—Ä–Ω–æ–µ': 5.0, '–û–∫–Ω–æ –¥–≤–æ–π–Ω–æ–µ': 2.9, '–û–∫–Ω–æ —Ç—Ä–æ–π–Ω–æ–µ': 1.5, '–û–∫–Ω–æ –µ–≤—Ä–æ–ø–∞–∫–µ—Ç': 1.3, '–î–≤–µ—Ä—å –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è': 2.0, '–î–≤–µ—Ä—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è': 1.5, '–î–≤–µ—Ä—å —É—Ç–µ–ø–ª–µ–Ω–Ω–∞—è': 0.8, '–ü–æ–ª –Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.5, '–ü–æ–ª —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.2, '–ü–æ—Ç–æ–ª–æ–∫ –Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.6, '–ü–æ—Ç–æ–ª–æ–∫ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.25 }
INFILTRATION_RATES = { "–í—ã—Å–æ–∫–∞—è (—Ü–µ—Ö, —á–∞—Å—Ç—ã–µ –≤–æ—Ä–æ—Ç–∞)": 1.5, "–°—Ä–µ–¥–Ω—è—è (—Å–∫–ª–∞–¥, —Ä–µ–¥–∫–∏–µ –≤–æ—Ä–æ—Ç–∞)": 0.7, "–ù–∏–∑–∫–∞—è (–≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ–µ –∑–¥–∞–Ω–∏–µ)": 0.3 }
SECTION_COEFF = { '–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ': {350: 2.4, 500: 3.2}, '–ß—É–≥—É–Ω–Ω—ã–µ': {350: 1.8, 500: 2.6} }

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------

def infer_room_sides_from_area(area_m2, ratio=1.0):
    if area_m2 <= 0: return 1.0, 1.0
    width = math.sqrt(area_m2 / ratio)
    length = area_m2 / width
    return float(length), float(width)

def calculate_radiator_heat(sections, rad_type, height, t_fluid_in, t_in):
    if not sections or sections <= 0: return 0.0
    coeff = SECTION_COEFF.get(rad_type, {}).get(height, 2.2)
    delta_t = max(t_fluid_in - t_in, 0.0)
    return sections * coeff * delta_t

def calculate_heat_loss(params):
    area, height = params['area'], params['height']
    t_in, t_out = params['t_in'], params['t_out']
    delta_t = max(t_in - t_out, 0.0)

    length, width = infer_room_sides_from_area(area, params.get('shape_ratio', 1.0))
    wall_area = 2 * (length + width) * height
    room_volume = area * height

    wall_loss = wall_area * (MATERIALS.get(params['wall_material'], 0.4) / max(params['wall_thickness'], 0.01)) * delta_t
    window_loss = params['window_area'] * U_VALUES[params['window_type']] * delta_t
    door_loss = params['door_area'] * U_VALUES[params['door_type']] * delta_t
    floor_loss = area * U_VALUES['–ü–æ–ª —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if params['floor_insulated'] else '–ü–æ–ª –Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'] * delta_t
    ceiling_loss = area * U_VALUES['–ü–æ—Ç–æ–ª–æ–∫ —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if params['ceiling_insulated'] else '–ü–æ—Ç–æ–ª–æ–∫ –Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'] * delta_t
    infiltration_loss = room_volume * params['infiltration_rate'] * 1.2 * 1005 * delta_t / 3600

    components = {'–°—Ç–µ–Ω—ã': wall_loss, '–û–∫–Ω–∞': window_loss, '–î–≤–µ—Ä–∏': door_loss, '–ü–æ–ª': floor_loss, '–ü–æ—Ç–æ–ª–æ–∫': ceiling_loss, '–ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è': infiltration_loss}
    total_loss = sum(components.values())
    return total_loss, components, room_volume, (length, width)

def correct_fan_power(fan, t_water_actual, t_air_actual):
    POWER_EXPONENT = 1.2
    delta_t_nominal = fan['t_water_nom'] - fan['t_air_nom']
    delta_t_actual = t_water_actual - t_air_actual
    if delta_t_nominal <= 0 or delta_t_actual <= 0: return 0.0
    return fan['power_nominal'] * ((delta_t_actual / delta_t_nominal) ** POWER_EXPONENT)

def select_heat_exchangers(required_kw, room_volume, t_water_in, t_air_in, max_units=4):
    all_units = load_heat_exchangers()
    candidates = []
    for n in range(1, max_units + 1):
        for unit_base in all_units:
            corrected_power_per_unit = correct_fan_power(unit_base, t_water_in, t_air_in)
            total_power = corrected_power_per_unit * n
            total_air_flow = unit_base['air_flow'] * n
            if required_kw <= 0: continue
            
            power_margin_ratio = total_power / required_kw
            air_exchange_rate = total_air_flow / max(room_volume, 1.0)
            
            if power_margin_ratio >= 1.15 and 2.5 <= air_exchange_rate <= 7.0:
                candidates.append({
                    'model': f"{n} √ó {unit_base['model']}", 'base_model': unit_base['model'],
                    'base_data': unit_base, 'units': n, 'power_kW': total_power,
                    'air_flow': total_air_flow, 'air_exchange': round(air_exchange_rate, 2),
                    'power_reserve_%': round((total_power - required_kw) / required_kw * 100, 1),
                    'price': unit_base['price'] * n
                })
    return sorted(candidates, key=lambda x: (x['price'], x['power_reserve_%']))

def calculate_recommended_flow(power_kw, delta_t_target=20.0):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã (–º¬≥/—á) –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è."""
    if power_kw <= 0: return 0.0
    WATER_DENSITY_KG_M3 = 970
    WATER_SPECIFIC_HEAT_J_KG_C = 4190
    power_w = power_kw * 1000
    mass_flow_kg_s = power_w / (WATER_SPECIFIC_HEAT_J_KG_C * delta_t_target)
    volume_flow_m3h = mass_flow_kg_s * 3600 / WATER_DENSITY_KG_M3
    return volume_flow_m3h

def create_room_visual(length, width, fan_config):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –ø–æ–º–µ—â–µ–Ω–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤–æ–∑–¥—É—à–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤."""
    fig, ax = plt.subplots(figsize=(8, 8 * (width / max(length, 1e-6))))
    ax.set_xlim(-1, length + 1)
    ax.set_ylim(-1, width + 1)
    ax.set_aspect('equal')
    ax.set_title("–°—Ö–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –≤–æ–∑–¥—É—à–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
    ax.add_patch(patches.Rectangle((0, 0), length, width, fill=False, linewidth=2, edgecolor='gray'))
    ax.grid(True, linestyle=':', alpha=0.6)

    num_fans = fan_config.get('units', 0)
    if num_fans > 0:
        fan_data = fan_config['base_data']
        throw_length = min(fan_data['throw_length'], width * 0.95)
        cone_width = throw_length * 0.4

        for i in range(num_fans):
            x_fan = length * (i + 1) / (num_fans + 1)
            y_fan = width - 0.2

            # –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä
            ax.scatter(x_fan, y_fan, s=150, marker='s', color='black', zorder=10, ec='white')
            ax.text(x_fan, y_fan + 0.5, fan_config['base_model'], ha='center', va='bottom', fontsize=9, weight='bold')

            # –ü–æ—Ç–æ–∫ –≤–æ–∑–¥—É—Ö–∞ (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
            gradient = np.linspace(1.0, 0.0, 256).reshape(-1, 1)
            gradient = np.tile(gradient, (1, 64))
            
            x_start = x_fan - cone_width / 2
            y_start = y_fan - throw_length
            
            ax.imshow(gradient, cmap='Oranges', extent=[x_start, x_start + cone_width, y_start, y_fan], 
                      aspect='auto', zorder=5, alpha=0.7)

    ax.set_xlabel("–î–ª–∏–Ω–∞ (–º)")
    ax.set_ylabel("–®–∏—Ä–∏–Ω–∞ (–º)")
    plt.tight_layout()
    return fig

# -----------------------------
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# -----------------------------
def main():
    st.title("üå™Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–∞ —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤ –¢–æ—Ä–Ω–∞–¥–æ")
    st.markdown("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–±–µ—Ä–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å, —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å—Ö–µ–º—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.")

    with st.sidebar:
        st.header("üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è")
        area = st.number_input("–ü–ª–æ—â–∞–¥—å (–º¬≤)", 10.0, 10000.0, 200.0, 10.0)
        height = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)", 2.5, 25.0, 6.0, 0.1)
        ratio_map = {"1:1 (–∫–≤–∞–¥—Ä–∞—Ç)": 1.0, "2:1": 2.0, "3:1": 3.0}
        shape_ratio = ratio_map[st.selectbox("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –î–ª–∏–Ω–∞:–®–∏—Ä–∏–Ω–∞", list(ratio_map.keys()))]

        st.subheader("–û–≥—Ä–∞–∂–¥–∞—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        wall_material = st.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()), 0)
        wall_thickness_cm = st.number_input("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (—Å–º)", 5, 200, 38, 1)

        window_area = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", 0.0, value=20.0, step=1.0)
        window_type = st.selectbox("–¢–∏–ø –æ–∫–æ–Ω", list(U_VALUES.keys())[0:4], 3)
        door_area = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π/–≤–æ—Ä–æ—Ç (–º¬≤)", 0.0, value=4.0, step=0.5)
        door_type = st.selectbox("–¢–∏–ø –¥–≤–µ—Ä–µ–π/–≤–æ—Ä–æ—Ç", list(U_VALUES.keys())[4:7], 2)

        st.subheader("–£—Ç–µ–ø–ª–µ–Ω–∏–µ –∏ –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ—Å—Ç—å")
        floor_insulated = st.checkbox("–ü–æ–ª —É—Ç–µ–ø–ª–µ–Ω", value=True)
        ceiling_insulated = st.checkbox("–ü–æ—Ç–æ–ª–æ–∫ —É—Ç–µ–ø–ª–µ–Ω", value=True)
        infiltration_rate = INFILTRATION_RATES[st.selectbox("–ì–µ—Ä–º–µ—Ç–∏—á–Ω–æ—Å—Ç—å –ø–æ–º–µ—â–µ–Ω–∏—è", list(INFILTRATION_RATES.keys()), 1)]
        
        st.header("üå°Ô∏è –ö–ª–∏–º–∞—Ç –∏ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—å")
        t_out = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–Ω–∞—Ä—É–∂–∏ (¬∞C)", value=-25.0, step=1.0)
        t_in = st.number_input("–¢—Ä–µ–±—É–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä–∏ (¬∞C)", value=18.0, step=1.0)
        t_fluid_in = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è –Ω–∞ –≤—Ö–æ–¥–µ (¬∞C)", value=80.0, step=1.0)

        st.header("‚ô®Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã")
        rad_present = st.checkbox("–£—á–µ—Å—Ç—å –∏–º–µ—é—â–∏–µ—Å—è —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã")
        rad_sections_total, rad_type, rad_height = 0, None, None
        if rad_present:
            rad_type = st.selectbox("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", list(SECTION_COEFF.keys()))
            rad_height = st.selectbox("–í—ã—Å–æ—Ç–∞ —Å–µ–∫—Ü–∏–∏ (–º–º)", [350, 500])
            input_mode = st.radio("–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π?", ("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü–æ —Å–≤—è–∑–∫–∞–º"))
            if input_mode == "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                rad_sections_total = st.number_input("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π", 0, value=50, step=1)
            else:
                banks = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–æ–∫", 1, value=5)
                per_bank = st.number_input("–°–µ–∫—Ü–∏–π –≤ –æ–¥–Ω–æ–π —Å–≤—è–∑–∫–µ", 1, value=10)
                rad_sections_total = banks * per_bank

    params = {
        'area': area, 'height': height, 'shape_ratio': shape_ratio,
        'wall_material': wall_material, 'wall_thickness': wall_thickness_cm / 100.0,
        'window_area': window_area, 'window_type': window_type,
        'door_area': door_area, 'door_type': door_type,
        'floor_insulated': floor_insulated, 'ceiling_insulated': ceiling_insulated,
        'infiltration_rate': infiltration_rate, 't_out': t_out, 't_in': t_in
    }

    total_loss_w, breakdown, volume, (length, width) = calculate_heat_loss(params)
    radiator_heat_w = calculate_radiator_heat(rad_sections_total, rad_type, rad_height, t_fluid_in, t_in)
    net_need_kw = max(total_loss_w - radiator_heat_w, 0.0) / 1000.0
    suitable_options = select_heat_exchangers(net_need_kw, volume, t_fluid_in, t_in)
    
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")
    col1, col2, col3 = st.columns(3)
    col1.metric("–û–±—â–∏–µ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏", f"{total_loss_w/1000:.2f} –∫–í—Ç")
    col2.metric("–¢–µ–ø–ª–æ–æ—Ç–¥–∞—á–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", f"{radiator_heat_w/1000:.2f} –∫–í—Ç")
    col3.metric("–¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å", f"{net_need_kw:.2f} –∫–í—Ç", delta_color="inverse")

    st.subheader("üî• –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    if net_need_kw < 0.1:
        st.success("–¢–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")
    elif suitable_options:
        df = pd.DataFrame(suitable_options)
        df_display = df[['model', 'power_kW', 'air_flow', 'air_exchange', 'power_reserve_%', 'price']].copy()
        df_display.columns = ['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç', '–í–æ–∑–¥—É—Ö, –º¬≥/—á', '–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å, 1/—á', '–ó–∞–ø–∞—Å, %', '–¶–µ–Ω–∞, —Ä—É–±']
        st.dataframe(df_display, use_container_width=True, hide_index=True)
        
        best_option = suitable_options[0]
        st.success(f"**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:** {best_option['model']} (–û–±—â–∞—è —Ü–µ–Ω–∞: {best_option['price']:,} —Ä—É–±.)")
        
        c1, c2, c3 = st.columns(3)
        power_per_unit_kw = best_option['power_kW'] / best_option['units']
        rec_flow = calculate_recommended_flow(power_per_unit_kw)
        c1.metric("–°–∫–æ—Ä—Ä–µ–∫—Ç. –º–æ—â–Ω–æ—Å—Ç—å", f"{best_option['power_kW']:.2f} –∫–í—Ç")
        c2.metric("–ó–∞–ø–∞—Å –º–æ—â–Ω–æ—Å—Ç–∏", f"{best_option['power_reserve_%']:.1f} %")
        c3.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã", f"{rec_flow:.2f} –º¬≥/—á", help="–†–∞—Å—Ö–æ–¥ –Ω–∞ 1 –∞–ø–ø–∞—Ä–∞—Ç –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤–æ–¥—ã –Ω–∞ 20¬∞C (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 80¬∞C –¥–æ 60¬∞C).")
    else:
        st.warning("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")

    main_col, empty_col = st.columns([2, 1])
    with main_col:
        tab1, tab2 = st.tabs(["–°—Ö–µ–º–∞ –ø–æ–º–µ—â–µ–Ω–∏—è", "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å"])
        with tab1:
            if suitable_options:
                fig = create_room_visual(length, width, suitable_options[0])
                st.pyplot(fig)
            else:
                st.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.")
        with tab2:
            if total_loss_w > 0:
                df_breakdown = pd.DataFrame(list(breakdown.items()), columns=['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç', '–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏, –í—Ç'])
                df_breakdown['–î–æ–ª—è, %'] = (df_breakdown['–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏, –í—Ç'] / total_loss_w * 100).round(1)
                st.dataframe(df_breakdown, use_container_width=True, hide_index=True)

if __name__ == "__main__":
    main()

