# tornado_calculator_full.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
import math

st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –¢–æ—Ä–Ω–∞–¥–æ ‚Äî –ø–æ–ª–Ω—ã–π",
    page_icon="üå™Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# -----------------------------
# –î–∞–Ω–Ω—ã–µ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -----------------------------
@st.cache_data
def load_heat_exchangers():
    # power ‚Äî –∫–í—Ç, air_flow ‚Äî –º¬≥/—á
    return [
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 3', 'power': 20.0,  'air_flow': 1330, 'price': 65000, 'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 4', 'power': 33.0,  'air_flow': 2670, 'price': 85000, 'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 5', 'power': 55.0,  'air_flow': 4500, 'price': 120000,'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        {'model': '–¢–æ—Ä–Ω–∞–¥–æ 10','power': 240.0, 'air_flow': 9000, 'price': 280000,'type': '—Ç–æ—Ä–Ω–∞–¥–æ'},
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –º–æ–¥–µ–ª–∏
    ]

# –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–±–µ—Ç–æ–Ω —É–¥–∞–ª—ë–Ω)
MATERIALS = {
    '–∫–∏—Ä–ø–∏—á': 0.7,
    '–≥–∞–∑–æ–±–ª–æ–∫': 0.18,
    '–ø–µ–Ω–æ–±–ª–æ–∫': 0.16,
    '–∫–µ—Ä–∞–º–∑–∏—Ç–æ–±–ª–æ–∫': 0.4,
    '—Å—ç–Ω–¥–≤–∏—á –ø–∞–Ω–µ–ª—å': 0.05,
    '–±—Ä—É—Å': 0.15
}

# U-–∑–Ω–∞—á–µ–Ω–∏—è (–í—Ç/–º¬≤¬∑¬∞C)
U_VALUES = {
    '–æ–∫–Ω–æ_–æ–¥–∏–Ω–∞—Ä–Ω–æ–µ': 5.0,
    '–æ–∫–Ω–æ_–¥–≤–æ–π–Ω–æ–µ': 2.9,
    '–æ–∫–Ω–æ_—Ç—Ä–æ–π–Ω–æ–µ': 1.5,
    '–æ–∫–Ω–æ_–µ–≤—Ä–æ': 1.3,
    '–¥–≤–µ—Ä—å_–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è': 2.0,
    '–¥–≤–µ—Ä—å_–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è': 1.5,
    '–¥–≤–µ—Ä—å_—É—Ç–µ–ø–ª–µ–Ω–Ω–∞—è': 0.8,
    '–ø–æ–ª_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.5,
    '–ø–æ–ª_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.2,
    '–ø–æ—Ç–æ–ª–æ–∫_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.6,
    '–ø–æ—Ç–æ–ª–æ–∫_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π': 0.25
}

# –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç–µ–ø–ª–æ–≤–æ–π –æ—Ç–¥–∞—á–∏ —Å–µ–∫—Ü–∏–∏ (–í—Ç/¬∞C –Ω–∞ —Å–µ–∫—Ü–∏—é)
SECTION_COEFF = {
    '–∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ': {350: 2.4, 500: 3.2},
    '—á—É–≥—É–Ω–Ω—ã–µ':    {350: 1.8, 500: 2.6}
}

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def infer_room_sides_from_area(area_m2, ratio=1.0):
    """
    –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø–æ –ø–ª–æ—â–∞–¥–∏ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω (length/width = ratio).
    –ï—Å–ª–∏ ratio=1 -> –∫–≤–∞–¥—Ä–∞—Ç.
    """
    if area_m2 <= 0:
        return 1.0, 1.0
    width = math.sqrt(area_m2 / ratio)
    length = area_m2 / width
    return float(length), float(width)

def radiator_total_heat(sections_total, rad_type, height_mm, t_fluid_in, t_in):
    """Q = sections_total * coeff * (t_fluid_in - t_in) (–í—Ç)"""
    if sections_total <= 0:
        return 0.0
    coeff = SECTION_COEFF.get(rad_type, {}).get(height_mm, None)
    if coeff is None:
        coeff = 2.2
    delta = max(t_fluid_in - t_in, 0.0)
    return sections_total * coeff * delta

def calculate_heat_loss_by_components(params):
    """
    –†–∞—Å—á—ë—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å –≤ –≤–∞—Ç—Ç–∞—Ö.
    params: dict —Å –∫–ª—é—á–∞–º–∏ (area, height, wall_material, wall_thickness, window_area, window_type,
    door_area, door_type, floor_insulated, ceiling_insulated, t_out, t_in)
    """
    area = params['area']
    height = params['height']
    t_out = params['t_out']
    t_in = params['t_in']
    delta = max(t_in - t_out, 0.0)

    # –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å ratio)
    length_est, width_est = infer_room_sides_from_area(area, params.get('shape_ratio', 1.0))
    perimeter = 2 * (length_est + width_est)
    wall_area = perimeter * height

    wall_loss = wall_area * (MATERIALS.get(params['wall_material'], 0.4) / max(params['wall_thickness'], 0.01)) * delta
    window_loss = params['window_area'] * U_VALUES[params['window_type']] * delta
    door_loss = params['door_area'] * U_VALUES[params['door_type']] * delta
    floor_type = '–ø–æ–ª_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if params['floor_insulated'] else '–ø–æ–ª_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'
    floor_loss = area * U_VALUES[floor_type] * delta
    ceiling_type = '–ø–æ—Ç–æ–ª–æ–∫_—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π' if params['ceiling_insulated'] else '–ø–æ—Ç–æ–ª–æ–∫_–Ω–µ—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–π'
    ceiling_loss = area * U_VALUES[ceiling_type] * delta

    room_volume = area * height
    infiltration_loss = room_volume * 0.3 * 1.2 * 1005 * delta / 3600  # –í—Ç

    components = {
        '–°—Ç–µ–Ω—ã': wall_loss,
        '–û–∫–Ω–∞': window_loss,
        '–î–≤–µ—Ä–∏': door_loss,
        '–ü–æ–ª': floor_loss,
        '–ü–æ—Ç–æ–ª–æ–∫': ceiling_loss,
        '–ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è': infiltration_loss
    }
    total_loss = sum(components.values())
    return total_loss, components, room_volume, (length_est, width_est), wall_area

def select_heat_exchangers(required_kw, room_volume, prefer_type="—Ç–æ—Ä–Ω–∞–¥–æ", max_units=4):
    """
    –ü–æ–¥–±–æ—Ä 1..max_units –∞–≥—Ä–µ–≥–∞—Ç–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: —Å—É–º–º–∞—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å >= required * 1.15 –∏ –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–æ–æ–±–º–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2.5..7
    """
    units = load_heat_exchangers()
    candidates = []
    for n in range(1, max_units+1):
        for u in units:
            if prefer_type != "–≤—Å–µ" and u['type'] != prefer_type:
                continue
            total_power = u['power'] * n  # –∫–í—Ç
            total_air = u['air_flow'] * n  # –º3/—á
            if required_kw <= 0:
                continue
            power_margin_ratio = total_power / required_kw
            air_exchange = total_air / max(room_volume, 1.0)
            if power_margin_ratio >= 1.15 and 2.5 <= air_exchange <= 7.0:
                candidates.append({
                    'model': f"{n} √ó {u['model']}",
                    'base_model': u['model'],
                    'units': n,
                    'power_kW': total_power,
                    'air_flow': total_air,
                    'air_exchange': round(air_exchange, 2),
                    'power_reserve_%': round((total_power - required_kw) / required_kw * 100, 1),
                    'price': u['price'] * n
                })
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –º–µ–Ω—å—à–µ–π —Ü–µ–Ω–µ, –∑–∞—Ç–µ–º –ø–æ –º–µ–Ω—å—à–µ–π –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ–µ)
    candidates_sorted = sorted(candidates, key=lambda x: (x['price'], abs(x['power_reserve_%'])))
    return candidates_sorted

def create_room_visual(length_m, width_m, fan_positions, fan_directions, show_grid=False):
    """
    –†–∏—Å—É–µ—Ç –∫–æ–º–Ω–∞—Ç—É (length x width), –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö.
    fan_positions: list of (x, y) in meters (0..length, 0..width).
    fan_directions: list of angles (radians) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞.
    """
    fig, ax = plt.subplots(figsize=(8, max(4, 6 * (width_m / max(length_m,1e-6)))))
    ax.set_xlim(0, length_m)
    ax.set_ylim(0, width_m)
    ax.set_aspect('equal')
    ax.set_title("–°—Ö–µ–º–∞ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤")
    ax.add_patch(plt.Rectangle((0, 0), length_m, width_m, fill=False, linewidth=2))

    if show_grid:
        ax.set_xticks([round(x,1) for x in list(range(0, int(math.ceil(length_m))+1))])
        ax.set_yticks([round(y,1) for y in list(range(0, int(math.ceil(width_m))+1))])
        ax.grid(True, linestyle=':', alpha=0.5)

    # —Ä–∏—Å—É–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã –∏ —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ—Ç–æ–∫–∞
    for idx, pos in enumerate(fan_positions):
        x, y = pos
        ax.scatter(x, y, s=160, marker='^', color='tab:orange', zorder=10)
        ax.text(x, y - 0.3, f"FV{idx+1}", ha='center', va='top', fontsize=9, weight='bold')
        # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ç—Ä–µ–ª–∫–∞ –≤–ø–µ—Ä—ë–¥
        angle = fan_directions[idx] if idx < len(fan_directions) else 0.0
        dx = math.cos(angle) * max(length_m, width_m) * 0.35
        dy = math.sin(angle) * max(length_m, width_m) * 0.35
        ax.arrow(x, y, dx, dy, head_width=0.2*max(1, width_m/10), head_length=0.25*max(1,length_m/10), color='tab:orange', alpha=0.8)

    ax.set_xlabel("–î–ª–∏–Ω–∞ (–º)")
    ax.set_ylabel("–®–∏—Ä–∏–Ω–∞ (–º)")
    plt.tight_layout()
    return fig

# -----------------------------
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
# -----------------------------
def main():
    st.title("üå™Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –¢–æ—Ä–Ω–∞–¥–æ ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
    st.markdown("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ). –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω –ø–æ–¥–±–µ—Ä—ë—Ç —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã (1..4) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")

    # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è
    with st.sidebar:
        st.header("üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è")

        area = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)", min_value=4.0, max_value=100000.0, value=100.0, step=1.0)
        height = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–º)", min_value=2.0, max_value=30.0, value=6.0, step=0.1)

        st.markdown("–§–æ—Ä–º–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)")
        shape_ratio = st.selectbox("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∫ —à–∏—Ä–∏–Ω–µ (L:W)", ["1:1 (–∫–≤–∞–¥—Ä–∞—Ç)", "2:1", "3:1", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ"], index=0)
        if shape_ratio == "1:1 (–∫–≤–∞–¥—Ä–∞—Ç)":
            ratio = 1.0
        elif shape_ratio == "2:1":
            ratio = 2.0
        elif shape_ratio == "3:1":
            ratio = 3.0
        else:
            ratio = st.number_input("–í–≤–µ–¥–∏—Ç–µ L/W (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.5)", min_value=0.2, max_value=10.0, value=1.0, step=0.1)

        st.subheader("–û–≥—Ä–∞–∂–¥–∞—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        wall_material = st.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()))
        wall_thickness = st.number_input("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (–º)", min_value=0.05, max_value=2.0, value=0.3, step=0.01)

        st.markdown("–û–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏")
        window_area = st.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", min_value=0.0, value=5.0, step=0.1)
        window_type = st.selectbox("–¢–∏–ø –æ–∫–æ–Ω", ["–æ–∫–Ω–æ_–µ–≤—Ä–æ", "–æ–∫–Ω–æ_—Ç—Ä–æ–π–Ω–æ–µ", "–æ–∫–Ω–æ_–¥–≤–æ–π–Ω–æ–µ", "–æ–∫–Ω–æ_–æ–¥–∏–Ω–∞—Ä–Ω–æ–µ"])
        door_area = st.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", min_value=0.0, value=2.0, step=0.1)
        door_type = st.selectbox("–¢–∏–ø –¥–≤–µ—Ä–µ–π", ["–¥–≤–µ—Ä—å_—É—Ç–µ–ø–ª–µ–Ω–Ω–∞—è", "–¥–≤–µ—Ä—å_–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è", "–¥–≤–µ—Ä—å_–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è"])

        st.subheader("–£—Ç–µ–ø–ª–µ–Ω–∏–µ")
        floor_insulated = st.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ–ª", value=True)
        ceiling_insulated = st.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ—Ç–æ–ª–æ–∫", value=True)

        st.subheader("–ö–ª–∏–º–∞—Ç")
        t_out = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–Ω–∞—Ä—É–∂–∏ ¬∞C", value=-20.0, step=0.5)
        t_in = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä–∏ (—Ü–µ–ª–µ–≤–∞—è) ¬∞C", value=18.0, step=0.5)
        t_fluid_in = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è –Ω–∞ –≤—Ö–æ–¥–µ ¬∞C", value=70.0, step=0.5)

        st.markdown("---")
        st.header("‚ô®Ô∏è –†–∞–¥–∏–∞—Ç–æ—Ä—ã (—Ç–µ, —á—Ç–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)")
        rad_present = st.checkbox("–£ –º–µ–Ω—è –µ—Å—Ç—å —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã (—É—á–µ—Å—Ç—å –≤ —Ä–∞—Å—á—ë—Ç–µ)", value=False)
        rad_sections_total = 0
        rad_type = None
        rad_height = None
        if rad_present:
            rad_type = st.selectbox("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", ['–∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ', '—á—É–≥—É–Ω–Ω—ã–µ'])
            rad_height = st.selectbox("–í—ã—Å–æ—Ç–∞ —Å–µ–∫—Ü–∏–∏ (–º–º)", [350, 500])
            sections_mode = st.radio("–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—Ü–∏–π:", ["–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π", "—Å–µ–∫—Ü–∏–π –≤ —Å–≤—è–∑–∫–µ + —á–∏—Å–ª–æ —Å–≤—è–∑–æ–∫"], index=0)
            if sections_mode == "–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π":
                rad_sections_total = st.number_input("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π", min_value=0, value=0, step=1)
            else:
                per_bank = st.number_input("–°–µ–∫—Ü–∏–π –≤ –æ–¥–Ω–æ–π —Å–≤—è–∑–∫–µ", min_value=1, value=4, step=1)
                banks = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–æ–∫", min_value=1, value=1, step=1)
                rad_sections_total = per_bank * banks

        st.markdown("---")
        st.header("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∑–æ–Ω–∞)")
        location = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞:", [
            "–¶–µ—Ö ‚Ññ1", "–¶–µ—Ö ‚Ññ2", "–°–∫–ª–∞–¥", "–ê–Ω–≥–∞—Ä / –≥–∞—Ä–∞–∂", "–ü–æ–¥—Å–æ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "–û—Ñ–∏—Å –≤–Ω—É—Ç—Ä–∏ —Ü–µ—Ö–∞"
        ], index=0)

        st.markdown("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ (–∫–∞—Å–∫–∞–¥)")
        max_units = st.slider("–ú–∞–∫—Å. –∞–≥—Ä–µ–≥–∞—Ç–æ–≤", min_value=1, max_value=4, value=3, step=1)

    # -----------------------------
    # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: —Ä–∞—Å—á—ë—Ç—ã (–æ–Ω–ª–∞–π–Ω)
    # -----------------------------
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        'area': area,
        'height': height,
        'shape_ratio': ratio,
        'wall_material': wall_material,
        'wall_thickness': wall_thickness,
        'window_area': window_area,
        'window_type': window_type,
        'door_area': door_area,
        'door_type': door_type,
        'floor_insulated': floor_insulated,
        'ceiling_insulated': ceiling_insulated,
        't_out': t_out,
        't_in': t_in
    }

    total_loss_w, breakdown, room_volume, (room_length, room_width), wall_area = calculate_heat_loss_by_components(params)

    # –¢–µ–ø–ª–æ –æ—Ç —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã)
    radiator_heat_w = 0.0
    if rad_present and rad_sections_total > 0:
        radiator_heat_w = radiator_total_heat(rad_sections_total, rad_type, rad_height, t_fluid_in, t_in)

    net_need_w = max(total_loss_w - radiator_heat_w, 0.0)
    net_need_kw = net_need_w / 1000.0

    # –ü–æ–¥–±–æ—Ä —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ (–∫–∞—Å–∫–∞–¥)
    suitable = select_heat_exchangers(net_need_kw if net_need_kw > 0 else 0.001, room_volume, prefer_type="—Ç–æ—Ä–Ω–∞–¥–æ", max_units=max_units)

    # -----------------------------
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # -----------------------------
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ (–æ–Ω–ª–∞–π–Ω)")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.metric("–ü–ª–æ—â–∞–¥—å", f"{area:.1f} –º¬≤")
        st.metric("–û–±—ä—ë–º", f"{room_volume:.1f} –º¬≥")
        st.metric("–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–ø—Ä–∏–±–ª.)", f"{wall_area:.1f} –º¬≤")
    with c2:
        st.metric("–¢ –Ω–∞—Ä—É–∂–Ω.", f"{t_out:.1f} ¬∞C")
        st.metric("–¢ –≤–Ω—É—Ç—Ä.", f"{t_in:.1f} ¬∞C")
        st.metric("–¢ –≤—Ö. —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è", f"{t_fluid_in:.1f} ¬∞C")
    with c3:
        st.metric("–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ (–∏—Ç–æ–≥–æ)", f"{total_loss_w/1000:.3f} –∫–í—Ç")
        st.metric("–†–∞–¥–∏–∞—Ç–æ—Ä—ã (–æ—Ç–¥–∞—á–∞)", f"{radiator_heat_w/1000:.3f} –∫–í—Ç")
        st.metric("–û—Å—Ç–∞—Ç–æ–∫ (–Ω—É–∂–Ω–∞ –º–æ—â–Ω–æ—Å—Ç—å)", f"{net_need_kw:.3f} –∫–í—Ç")

    st.subheader("üîé –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º (–í—Ç)")
    df_comp = pd.DataFrame(list(breakdown.items()), columns=['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç','–í—Ç'])
    st.dataframe(df_comp, use_container_width=True)

    # -----------------------------
    # –ü–æ–¥–±–æ—Ä –∏ –≤—ã–≤–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    # -----------------------------
    st.subheader("üî• –ü–æ–¥–±–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)")
    if net_need_kw <= 0:
        st.success("–†–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        suitable = []
    else:
        if suitable:
            df_suit = pd.DataFrame(suitable)
            df_suit_display = df_suit[['model','power_kW','air_flow','air_exchange','power_reserve_%','price']].copy()
            df_suit_display.columns = ['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è','–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç','–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞, –º¬≥/—á','–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å, 1/—á','–ó–∞–ø–∞—Å, %','–¶–µ–Ω–∞, —Ä—É–±.']
            st.dataframe(df_suit_display, use_container_width=True)
            best = suitable[0]
            st.success(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {best['model']} (–º–æ—â–Ω–æ—Å—Ç—å {best['power_kW']} –∫–í—Ç, –∑–∞–ø–∞—Å {best['power_reserve_%']}%)")
        else:
            st.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å max –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è).")

    # -----------------------------
    # –í—ã–±–æ—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    # -----------------------------
    st.subheader("üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞(–æ–≤) ‚Äî –∞–≤—Ç–æ–º–∞—Ç –∏–ª–∏ –≤—Ä—É—á–Ω—É—é")
    placement_mode = st.radio("–†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", "–†—É—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (–≤ –º–µ—Ç—Ä–∞—Ö)"], index=0)

    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–æ–º–∑–æ–Ω–∞—Ö (–∞–≤—Ç–æ)
    default_positions = []
    default_directions = []
    if placement_mode == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ":
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å units ‚Äî —Ä–∞—Å—Å—Ç–∞–≤–∏–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤–¥–æ–ª—å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        units_to_place = best['units'] if (net_need_kw > 0 and len(suitable)>0) else 1
        for i in range(units_to_place):
            x = room_length * (i + 1) / (units_to_place + 1)
            y = room_width * 0.08  # –≤–¥–æ–ª—å –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Ç–µ–Ω—ã, 8% –æ—Ç —à–∏—Ä–∏–Ω—ã
            default_positions.append((x, y))
            default_directions.append(0.0)  # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–¥–æ–ª—å –æ—Å–∏ X
        st.info(f"–ê–≤—Ç–æ-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: —Ä–∞–∑–º–µ—â–µ–Ω–æ {len(default_positions)} –∞–≥—Ä–µ–≥–∞—Ç–∞(–æ–≤) –≤–¥–æ–ª—å —Å—Ç–µ–Ω—ã (–∑–æ–Ω–∞: {location})")
    else:
        # —Ä—É—á–Ω–∞—è: —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä) –ª–∏–±–æ –¥–ª—è 1..max_units
        units_to_place = best['units'] if (net_need_kw > 0 and len(suitable)>0) else 1
        st.info(f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {units_to_place} –∞–≥—Ä–µ–≥–∞—Ç–∞(–æ–≤). –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: x ‚àà [0, {room_length:.2f}], y ‚àà [0, {room_width:.2f}]")
        for i in range(units_to_place):
            st.markdown(f"**–ê–≥—Ä–µ–≥–∞—Ç {i+1}**")
            x = st.number_input(f"X_{i+1} (–º)", min_value=0.0, max_value=room_length, value=room_length*(i+1)/(units_to_place+1), step=0.1, key=f"x_{i}")
            y = st.number_input(f"Y_{i+1} (–º)", min_value=0.0, max_value=room_width, value=room_width*0.1, step=0.1, key=f"y_{i}")
            angle_deg = st.slider(f"–£–≥–æ–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—ë–ø–ª–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞ {i+1} (–≥—Ä–∞–¥)", min_value=-180, max_value=180, value=0, key=f"ang_{i}")
            default_positions.append((x,y))
            default_directions.append(math.radians(angle_deg))

    # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç ‚Äî directions = 0 (–≤–¥–æ–ª—å X), –µ—Å–ª–∏ —Ä—É—á–Ω–æ–π ‚Äî user-provided angles used above
    if placement_mode == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ":
        # –¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∞–≤—Ç–æ—Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        auto_choice = st.selectbox("–¢–∏–ø –∞–≤—Ç–æ—Ä–∞–∑–º–µ—â–µ–Ω–∏—è:", ["–í–¥–æ–ª—å –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã", "–ü–æ —Ü–µ–Ω—Ç—Ä—É", "–í —É–≥–ª–∞—Ö"], index=0)
        if auto_choice == "–í–¥–æ–ª—å –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã":
            # —Ä–∞–∑–º–µ—Å—Ç–∏–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–¥–æ–ª—å –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã
            units_to_place = best['units'] if (net_need_kw > 0 and len(suitable)>0) else 1
            default_positions = []
            default_directions = []
            for i in range(units_to_place):
                x = room_length * (i + 1) / (units_to_place + 1)
                # –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–µ–Ω—É: –µ—Å–ª–∏ length>=width ‚Äî –≤–¥–æ–ª—å –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ (y small), –∏–Ω–∞—á–µ –ø–æ –±–æ–∫–æ–≤–æ–π
                if room_length >= room_width:
                    y = room_width * 0.06
                    dir_angle = 0.0
                else:
                    y = room_width * (i+1)/(units_to_place+1)
                    x = room_length * 0.06
                    dir_angle = math.pi/2
                default_positions.append((x,y))
                default_directions.append(dir_angle)
        elif auto_choice == "–ü–æ —Ü–µ–Ω—Ç—Ä—É":
            default_positions = [(room_length/2, room_width/2)]
            default_directions = [0.0]
        else:  # —É–≥–ª—ã
            default_positions = [(room_length*0.08, room_width*0.08), (room_length*0.92, room_width*0.92)]
            default_directions = [0.0, math.pi]

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è –∏ –≤–æ–∑–¥—É—à–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
    fig = create_room_visual(room_length, room_width, default_positions, default_directions, show_grid=True)
    st.pyplot(fig)

    # -----------------------------
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # -----------------------------
    st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    out = {
        'area_m2': area,
        'height_m': height,
        'volume_m3': room_volume,
        't_out_C': t_out,
        't_in_C': t_in,
        't_fluid_in_C': t_fluid_in,
        'total_loss_kW': round(total_loss_w/1000.0, 3),
        'radiator_heat_kW': round(radiator_heat_w/1000.0, 3),
        'need_kW': round(net_need_kw, 3),
        'recommended_configuration': (best['model'] if (net_need_kw>0 and len(suitable)>0) else '‚Äî'),
        'recommended_price': (best['price'] if (net_need_kw>0 and len(suitable)>0) else 0),
        'location_zone': location
    }
    df_out = pd.DataFrame([out])
    csv_buf = io.StringIO()
    df_out.to_csv(csv_buf, index=False)
    st.download_button("–°–∫–∞—á–∞—Ç—å CSV —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", csv_buf.getvalue(), file_name=f"toronado_calc_{int(area)}m2.csv", mime="text/csv")

    report = f"""–û–¢–ß–ï–¢ ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞ –¢–æ—Ä–Ω–∞–¥–æ
–ü–ª–æ—â–∞–¥—å: {area:.1f} –º¬≤
–í—ã—Å–æ—Ç–∞: {height:.2f} –º
–û–±—ä—ë–º: {room_volume:.1f} –º¬≥
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: –Ω–∞—Ä—É–∂–Ω. {t_out:.1f}¬∞C, –≤–Ω—É—Ç—Ä–µ–Ω–Ω. {t_in:.1f}¬∞C
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è: {t_fluid_in:.1f}¬∞C

–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ (–∏—Ç–æ–≥–æ): {total_loss_w/1000.0:.3f} –∫–í—Ç
–û—Ç–¥–∞—á–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: {radiator_heat_w/1000.0:.3f} –∫–í—Ç
–û—Å—Ç–∞—Ç–æ–∫ (–Ω—É–∂–Ω–∞ –º–æ—â–Ω–æ—Å—Ç—å): {net_need_kw:.3f} –∫–í—Ç

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {(best['model'] if (net_need_kw>0 and len(suitable)>0) else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è / –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}
"""
    st.download_button("–°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç", report, file_name=f"toronado_report_{int(area)}m2.txt", mime="text/plain")

    st.markdown("---")
    st.caption("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ä–∞—Å—á—ë—Ç—ã –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã–µ –∏ —Å–ª—É–∂–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.")

if __name__ == "__main__":
    main()
